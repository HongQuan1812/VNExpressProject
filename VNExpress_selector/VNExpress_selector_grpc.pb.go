// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: VNExpress_selector.proto

package VNExpress_selector

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VNExpressSelectorClient is the client API for VNExpressSelector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VNExpressSelectorClient interface {
	SelectNews(ctx context.Context, in *Range, opts ...grpc.CallOption) (VNExpressSelector_SelectNewsClient, error)
	SelectPodcast(ctx context.Context, in *Range, opts ...grpc.CallOption) (VNExpressSelector_SelectPodcastClient, error)
}

type vNExpressSelectorClient struct {
	cc grpc.ClientConnInterface
}

func NewVNExpressSelectorClient(cc grpc.ClientConnInterface) VNExpressSelectorClient {
	return &vNExpressSelectorClient{cc}
}

func (c *vNExpressSelectorClient) SelectNews(ctx context.Context, in *Range, opts ...grpc.CallOption) (VNExpressSelector_SelectNewsClient, error) {
	stream, err := c.cc.NewStream(ctx, &VNExpressSelector_ServiceDesc.Streams[0], "/vnexpress_selector.VNExpress_selector/Select_news", opts...)
	if err != nil {
		return nil, err
	}
	x := &vNExpressSelectorSelectNewsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VNExpressSelector_SelectNewsClient interface {
	Recv() (*News, error)
	grpc.ClientStream
}

type vNExpressSelectorSelectNewsClient struct {
	grpc.ClientStream
}

func (x *vNExpressSelectorSelectNewsClient) Recv() (*News, error) {
	m := new(News)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vNExpressSelectorClient) SelectPodcast(ctx context.Context, in *Range, opts ...grpc.CallOption) (VNExpressSelector_SelectPodcastClient, error) {
	stream, err := c.cc.NewStream(ctx, &VNExpressSelector_ServiceDesc.Streams[1], "/vnexpress_selector.VNExpress_selector/Select_podcast", opts...)
	if err != nil {
		return nil, err
	}
	x := &vNExpressSelectorSelectPodcastClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VNExpressSelector_SelectPodcastClient interface {
	Recv() (*Podcast, error)
	grpc.ClientStream
}

type vNExpressSelectorSelectPodcastClient struct {
	grpc.ClientStream
}

func (x *vNExpressSelectorSelectPodcastClient) Recv() (*Podcast, error) {
	m := new(Podcast)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VNExpressSelectorServer is the server API for VNExpressSelector service.
// All implementations must embed UnimplementedVNExpressSelectorServer
// for forward compatibility
type VNExpressSelectorServer interface {
	SelectNews(*Range, VNExpressSelector_SelectNewsServer) error
	SelectPodcast(*Range, VNExpressSelector_SelectPodcastServer) error
	mustEmbedUnimplementedVNExpressSelectorServer()
}

// UnimplementedVNExpressSelectorServer must be embedded to have forward compatible implementations.
type UnimplementedVNExpressSelectorServer struct {
}

func (UnimplementedVNExpressSelectorServer) SelectNews(*Range, VNExpressSelector_SelectNewsServer) error {
	return status.Errorf(codes.Unimplemented, "method SelectNews not implemented")
}
func (UnimplementedVNExpressSelectorServer) SelectPodcast(*Range, VNExpressSelector_SelectPodcastServer) error {
	return status.Errorf(codes.Unimplemented, "method SelectPodcast not implemented")
}
func (UnimplementedVNExpressSelectorServer) mustEmbedUnimplementedVNExpressSelectorServer() {}

// UnsafeVNExpressSelectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VNExpressSelectorServer will
// result in compilation errors.
type UnsafeVNExpressSelectorServer interface {
	mustEmbedUnimplementedVNExpressSelectorServer()
}

func RegisterVNExpressSelectorServer(s grpc.ServiceRegistrar, srv VNExpressSelectorServer) {
	s.RegisterService(&VNExpressSelector_ServiceDesc, srv)
}

func _VNExpressSelector_SelectNews_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Range)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VNExpressSelectorServer).SelectNews(m, &vNExpressSelectorSelectNewsServer{stream})
}

type VNExpressSelector_SelectNewsServer interface {
	Send(*News) error
	grpc.ServerStream
}

type vNExpressSelectorSelectNewsServer struct {
	grpc.ServerStream
}

func (x *vNExpressSelectorSelectNewsServer) Send(m *News) error {
	return x.ServerStream.SendMsg(m)
}

func _VNExpressSelector_SelectPodcast_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Range)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VNExpressSelectorServer).SelectPodcast(m, &vNExpressSelectorSelectPodcastServer{stream})
}

type VNExpressSelector_SelectPodcastServer interface {
	Send(*Podcast) error
	grpc.ServerStream
}

type vNExpressSelectorSelectPodcastServer struct {
	grpc.ServerStream
}

func (x *vNExpressSelectorSelectPodcastServer) Send(m *Podcast) error {
	return x.ServerStream.SendMsg(m)
}

// VNExpressSelector_ServiceDesc is the grpc.ServiceDesc for VNExpressSelector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VNExpressSelector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vnexpress_selector.VNExpress_selector",
	HandlerType: (*VNExpressSelectorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Select_news",
			Handler:       _VNExpressSelector_SelectNews_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Select_podcast",
			Handler:       _VNExpressSelector_SelectPodcast_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "VNExpress_selector.proto",
}
